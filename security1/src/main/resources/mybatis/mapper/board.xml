<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 매퍼파일 -->
<mapper namespace="com.security.board.dao.BoardMapper">
	<!-- ver1 리팩토링 과정 서브쿼리 -> JOIN방식 -->
	<!-- 전체 게시물 조회(사용자명+좋아요+스크랩) -->
	<select id="findByAll" resultType="BoardDto">
		SELECT 
			B.*,
			(SELECT A.IMAGE FROM ACCOUNT A WHERE A.ACCOUNT_NO=B.ACCOUNT_NO) as IMAGE,
			(SELECT A.NAME FROM ACCOUNT A WHERE A.ACCOUNT_NO=B.ACCOUNT_NO) as NAME,
			(SELECT COUNT(BNO) FROM BOARD_LIKES L WHERE L.BNO=B.BNO) AS LIKES,
			(SELECT COUNT(BNO) FROM BOARD_SCRAPS S WHERE S.BNO=B.BNO) AS SCRAPS,
			(SELECT COUNT(BC_COMMENT) FROM BOARD_COMMENT C WHERE C.BNO=B.BNO) AS BCCOMMENT
		FROM BOARD B
		ORDER BY BNO DESC
	</select>
	
	<!-- 특정 게시물 조회 -->
	<select id="findByNo" parameterType="Long" resultType="BoardDto">
		SELECT 
			B.*,
			(SELECT A.NAME FROM ACCOUNT A WHERE A.ACCOUNT_NO=B.ACCOUNT_NO) as NAME
	    FROM BOARD B 
	    WHERE B.BNO = #{bno}
	</select>
	
	<!-- 게시판에서 사용자 정보 조회 -->
	<select id="findByAccountNo" parameterType="String" resultType="AccountDto">
		SELECT
			A.ACCOUNT_NO,
			A.IMAGE,
			A.USERNAME,
			A.ADDRESS,
			A.NAME,
			A.ENROLL_DATE,
			(SELECT COUNT(B.ACCOUNT_NO) FROM BOARD B WHERE B.ACCOUNT_NO=A.ACCOUNT_NO) AS POSTCOUNT,
			(SELECT COUNT(F.ACCOUNT_NO) FROM FRIENDSHIP F WHERE F.ACCOUNT_NO = A.ACCOUNT_NO) AS FOLLOWING,
			(SELECT COUNT(F.OPPONENT_NO) FROM FRIENDSHIP F WHERE F.ACCOUNT_NO = A.ACCOUNT_NO) AS FOLLOWER
		FROM ACCOUNT A
		WHERE A.ACCOUNT_NO = #{accountNo}
	</select>
	
	<!-- 특정 사용자가 등록한 게시글 전체 조회 -->
	<select id="findAllByNo">
		SELECT
			B.*,
			(SELECT A.NAME FROM ACCOUNT A WHERE A.ACCOUNT_NO=B.ACCOUNT_NO) as NAME,
			(SELECT COUNT(BNO) FROM BOARD_LIKES L WHERE L.BNO=B.BNO) AS LIKES,
			(SELECT COUNT(BNO) FROM BOARD_SCRAPS S WHERE S.BNO=B.BNO) AS SCRAPS,
			(SELECT COUNT(BC_COMMENT) FROM BOARD_COMMENT C WHERE C.BNO=B.BNO) AS BCCOMMENT
		FROM BOARD B
		WHERE B.ACCOUNT_NO=#{accountNo}
	</select>
	
	<!-- 게시판 상단 친구 목록 조회 및 해당 친구 정보 조회 -->
	<select id="findFriendByAccountNo" parameterType="String" resultType="FriendDto"> 
		SELECT 
			A.ACCOUNT_NO,
			A.NAME,
			A.IMAGE,
			A.ENROLL_DATE,
			(SELECT COUNT(B.ACCOUNT_NO) FROM BOARD B WHERE B.ACCOUNT_NO=A.ACCOUNT_NO) AS POSTCOUNT,
			(SELECT COUNT(F.ACCOUNT_NO) FROM FRIENDSHIP F WHERE F.ACCOUNT_NO = A.ACCOUNT_NO) AS FOLLOWING,
			(SELECT COUNT(F.OPPONENT_NO) FROM FRIENDSHIP F WHERE F.ACCOUNT_NO = A.ACCOUNT_NO) AS FOLLOWER
		FROM ACCOUNT A JOIN FRIENDSHIP F ON A.ACCOUNT_NO= F.OPPONENT_NO 
		WHERE F.ACCOUNT_NO=(SELECT ACCOUNT_NO FROM ACCOUNT WHERE ACCOUNT_NO=#{accountNo})
	</select>
	
	<!-- 특정 게시물 조회 마다 조회수 증가 -->
	<update id="incrementHitCount" parameterType="Long">
	    UPDATE BOARD
	    SET HIT_COUNT = HIT_COUNT + 1
	    WHERE BNO = #{bno}
	</update>
	
	<!-- 좋아요 누른 회원인지 확인 -->
	<select id="findByLike" parameterType="BoardLikesDto" resultType="int">
		SELECT COUNT(BNO) FROM BOARD_LIKES WEHRE BNO=#{bno} AND ACCOUNT_NO=#{account_no} 
	</select>
	
	<!-- 좋아요 버튼 클릭 -->
	<insert id="insertLike" parameterType="BoardLikesDto">
		INSERT INTO BOARD_LIKES VALUES(#{bno}, #{accountNo}, SYSDATE)
	</insert>
	
	<!-- 좋아요 이미 눌렀을 시 삭제 -->
	<delete id="deleteLike" parameterType="BoardLikesDto">
		DELETE FROM BOARD_LIKES WHERE BNO=#{bno} AND ACCOUNT_NO=#{accountNo}
	</delete>
	
	<!-- 게시글 등록 -->
	<insert id="save" parameterType="BoardDto">
		<selectKey keyProperty="bno" order="BEFORE" resultType="Long">
				SELECT SEQ_BOARD.NEXTVAL
				FROM DUAL
		</selectKey>
		INSERT INTO BOARD(BNO, ACCOUNT_NO, POSTDATE, TITLE, HIT_COUNT, BOARD_COMMENT, ADDRESS, EDIT_DATE) 
    	VALUES(#{bno}, #{accountNo}, SYSDATE, #{title}, DEFAULT, #{boardComment}, #{address}, null)
	</insert>
	<insert id="imageUpload" parameterType="BoardImageDto">
		INSERT INTO BOARD_IMAGE(BNO, IMAGE, LINE_LOC) 
		VALUES(SEQ_BOARD.CURRVAL, #{image}, #{lineLoc})
	</insert>
	
	<!-- 게시글 수정 -->
	<update id="update" parameterType="BoardDto">
		UPDATE BOARD
		<set>
	        <if test="title != null">TITLE = #{title},</if>
	        <if test="boardComment != null">BOARD_COMMENT = #{boardComment},</if>
	    </set> 
	    , EDIT_DATE=SYSDATE
		WHERE BNO=#{bno} 
	</update>
	
	<!-- 게시글 삭제 -->
	<delete id="delete">
		DELETE FROM BOARD WHERE ACCOUNT_NO=#{accountNo} AND BNO=#{bno}
	</delete>
</mapper>